[
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "CandidateView",
        "importPath": "registration.views",
        "description": "registration.views",
        "isExtraImport": true,
        "detail": "registration.views",
        "documentation": {}
    },
    {
        "label": "CandidateLoginView",
        "importPath": "login.views",
        "description": "login.views",
        "isExtraImport": true,
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "CompanyRegisterView",
        "importPath": "company_registration.views",
        "description": "company_registration.views",
        "isExtraImport": true,
        "detail": "company_registration.views",
        "documentation": {}
    },
    {
        "label": "CompanyLoginView",
        "importPath": "company_registration.views",
        "description": "company_registration.views",
        "isExtraImport": true,
        "detail": "company_registration.views",
        "documentation": {}
    },
    {
        "label": "CompanyProfileUpdateView",
        "importPath": "company_registration.views",
        "description": "company_registration.views",
        "isExtraImport": true,
        "detail": "company_registration.views",
        "documentation": {}
    },
    {
        "label": "JobPostCreateView",
        "importPath": "job_post.views",
        "description": "job_post.views",
        "isExtraImport": true,
        "detail": "job_post.views",
        "documentation": {}
    },
    {
        "label": "CompanyJobsView",
        "importPath": "job_post.views",
        "description": "job_post.views",
        "isExtraImport": true,
        "detail": "job_post.views",
        "documentation": {}
    },
    {
        "label": "JobPostDeleteView",
        "importPath": "job_post.views",
        "description": "job_post.views",
        "isExtraImport": true,
        "detail": "job_post.views",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinLengthValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinLengthValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "check_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "check_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "JobPost",
        "importPath": "job_post.models",
        "description": "job_post.models",
        "isExtraImport": true,
        "detail": "job_post.models",
        "documentation": {}
    },
    {
        "label": "JobPost",
        "importPath": "job_post.models",
        "description": "job_post.models",
        "isExtraImport": true,
        "detail": "job_post.models",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "company_registration.models",
        "description": "company_registration.models",
        "isExtraImport": true,
        "detail": "company_registration.models",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "company_registration.models",
        "description": "company_registration.models",
        "isExtraImport": true,
        "detail": "company_registration.models",
        "documentation": {}
    },
    {
        "label": "Candidate",
        "importPath": "registration.models",
        "description": "registration.models",
        "isExtraImport": true,
        "detail": "registration.models",
        "documentation": {}
    },
    {
        "label": "CandidateSerializer",
        "importPath": "registration.serializer",
        "description": "registration.serializer",
        "isExtraImport": true,
        "detail": "registration.serializer",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "kind": 6,
        "importPath": "backend.app.apps",
        "description": "backend.app.apps",
        "peekOfCode": "class AppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'app'",
        "detail": "backend.app.apps",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.backend.asgi",
        "description": "backend.backend.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "backend.backend.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-!xp!c1femi58d#r(h(!x@km19er)^^yxmj=9dav^gfg^nevf@(\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-!xp!c1femi58d#r(h(!x@km19er)^^yxmj=9dav^gfg^nevf@(\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"app\",",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"app\",\n    \"registration\",\n    \"rest_framework\",",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"corsheaders.middleware.CorsMiddleware\",\n]",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    \"DEFAULT_PERMISSION_CLASSES\": [\n        \"rest_framework.permissions.AllowAny\",\n    ],\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"rest_framework.authentication.SessionAuthentication\",\n        \"rest_framework.authentication.TokenAuthentication\",\n    ],\n}\nCORS_ORIGIN_ALLOW_ALL = True",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_ALLOW_ALL",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "CORS_ORIGIN_ALLOW_ALL = True\nROOT_URLCONF = \"backend.urls\"\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",  # React app URL\n]\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "ROOT_URLCONF = \"backend.urls\"\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",  # React app URL\n]\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",  # React app URL\n]\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "WSGI_APPLICATION = \"backend.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n# Database configuration\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": \"career_connect\",\n        \"USER\": \"safa\",\n        \"PASSWORD\": \"123456\",",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": \"career_connect\",\n        \"USER\": \"safa\",\n        \"PASSWORD\": \"123456\",\n        # \"HOST\": \"localhost\",\n        # \"PORT\": \"5432\",\n    }\n}",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# ==================================================================code for media files======================================================",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# ==================================================================code for media files======================================================\n# ============================================================================================================================================",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# ==================================================================code for media files======================================================\n# ============================================================================================================================================\nimport os",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# ==================================================================code for media files======================================================\n# ============================================================================================================================================\nimport os\n# Media settings\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# ==================================================================code for media files======================================================\n# ============================================================================================================================================\nimport os\n# Media settings\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "MEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, \"media\")",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.backend.urls",
        "description": "backend.backend.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"candidates/\", CandidateView.as_view(), name=\"candidate-list\"),\n    path(\"login/\", CandidateLoginView.as_view(), name=\"login\"),\n    path(\n        \"api/company/register/\", CompanyRegisterView.as_view(), name=\"company-register\"\n    ),\n    path(\"api/company/login/\", CompanyLoginView.as_view(), name=\"company-login\"),\n    path(\"api/company/post-job/\", JobPostCreateView.as_view(), name=\"company-job-post\"),\n    path(\"api/company/posted-jobs/\", CompanyJobsView.as_view(), name=\"posted-jobs\"),",
        "detail": "backend.backend.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.backend.wsgi",
        "description": "backend.backend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.backend.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.company_registration.migrations.0001_initial",
        "description": "backend.company_registration.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Company',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),",
        "detail": "backend.company_registration.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.company_registration.migrations.0002_company_password",
        "description": "backend.company_registration.migrations.0002_company_password",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('company_registration', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='company',\n            name='password',\n            field=models.CharField(default='123456', max_length=255),\n            preserve_default=False,",
        "detail": "backend.company_registration.migrations.0002_company_password",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.company_registration.migrations.0003_company_type",
        "description": "backend.company_registration.migrations.0003_company_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('company_registration', '0002_company_password'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='company',\n            name='type',\n            field=models.CharField(default='company', editable=False, max_length=50),\n        ),",
        "detail": "backend.company_registration.migrations.0003_company_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.company_registration.migrations.0004_rename_type_company_user_type",
        "description": "backend.company_registration.migrations.0004_rename_type_company_user_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('company_registration', '0003_company_type'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='company',\n            old_name='type',\n            new_name='user_type',\n        ),",
        "detail": "backend.company_registration.migrations.0004_rename_type_company_user_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.company_registration.migrations.0005_alter_company_user_type",
        "description": "backend.company_registration.migrations.0005_alter_company_user_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('company_registration', '0004_rename_type_company_user_type'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='company',\n            name='user_type',\n            field=models.CharField(default='company', editable=False),\n        ),",
        "detail": "backend.company_registration.migrations.0005_alter_company_user_type",
        "documentation": {}
    },
    {
        "label": "CompanyRegistrationConfig",
        "kind": 6,
        "importPath": "backend.company_registration.apps",
        "description": "backend.company_registration.apps",
        "peekOfCode": "class CompanyRegistrationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'company_registration'",
        "detail": "backend.company_registration.apps",
        "documentation": {}
    },
    {
        "label": "Company",
        "kind": 6,
        "importPath": "backend.company_registration.models",
        "description": "backend.company_registration.models",
        "peekOfCode": "class Company(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField(unique=True)\n    phone_number = models.CharField(\n        max_length=11,\n        validators=[\n            MinLengthValidator(11),\n        ],\n    )\n    location = models.CharField(max_length=255)",
        "detail": "backend.company_registration.models",
        "documentation": {}
    },
    {
        "label": "CompanySerializer",
        "kind": 6,
        "importPath": "backend.company_registration.serializers",
        "description": "backend.company_registration.serializers",
        "peekOfCode": "class CompanySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Company\n        fields = \"__all__\"\n    def create(self, validated_data):\n        password = validated_data.get(\"password\")\n        if password:\n            validated_data[\"password\"] = make_password(password)\n        return super().create(validated_data)\nclass CompanyProfileUpdateSerializer(serializers.ModelSerializer):",
        "detail": "backend.company_registration.serializers",
        "documentation": {}
    },
    {
        "label": "CompanyProfileUpdateSerializer",
        "kind": 6,
        "importPath": "backend.company_registration.serializers",
        "description": "backend.company_registration.serializers",
        "peekOfCode": "class CompanyProfileUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Company\n        exclude = [\"password\", \"id\"]",
        "detail": "backend.company_registration.serializers",
        "documentation": {}
    },
    {
        "label": "CompanyRegisterView",
        "kind": 6,
        "importPath": "backend.company_registration.views",
        "description": "backend.company_registration.views",
        "peekOfCode": "class CompanyRegisterView(APIView):\n    def post(self, request, *args, **kwargs):\n        serializer = CompanySerializer(data=request.data)\n        if serializer.is_valid():\n            company = serializer.save()\n            return Response(\n                {\n                    \"message\": \"Company registered successfully!\",\n                    \"company\": serializer.data,\n                },",
        "detail": "backend.company_registration.views",
        "documentation": {}
    },
    {
        "label": "CompanyLoginView",
        "kind": 6,
        "importPath": "backend.company_registration.views",
        "description": "backend.company_registration.views",
        "peekOfCode": "class CompanyLoginView(APIView):\n    def post(self, request, *args, **kwargs):\n        email = request.data.get(\"email\")\n        password = request.data.get(\"password\")\n        if not email or not password:\n            return Response(\n                {\"message\": \"Email and password are required.\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n        try:",
        "detail": "backend.company_registration.views",
        "documentation": {}
    },
    {
        "label": "CompanyProfileUpdateView",
        "kind": 6,
        "importPath": "backend.company_registration.views",
        "description": "backend.company_registration.views",
        "peekOfCode": "class CompanyProfileUpdateView(APIView):\n    def put(self, request):\n        company_id = request.data.get(\"id\")\n        if not company_id:\n            return Response(\n                {\"message\": \"Company ID is required\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n        try:\n            company = Company.objects.get(id=company_id)",
        "detail": "backend.company_registration.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.job_post.migrations.0001_initial",
        "description": "backend.job_post.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('company_registration', '0005_alter_company_user_type'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='JobPost',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "backend.job_post.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "JobPostConfig",
        "kind": 6,
        "importPath": "backend.job_post.apps",
        "description": "backend.job_post.apps",
        "peekOfCode": "class JobPostConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'job_post'",
        "detail": "backend.job_post.apps",
        "documentation": {}
    },
    {
        "label": "JobPost",
        "kind": 6,
        "importPath": "backend.job_post.models",
        "description": "backend.job_post.models",
        "peekOfCode": "class JobPost(models.Model):\n    company = models.ForeignKey(\n        Company,\n        on_delete=models.CASCADE,\n        related_name=\"job_posts\",\n    )\n    title = models.CharField(max_length=255)\n    tags = models.CharField(max_length=255, help_text=\"Comma-separated tags (max 6)\")\n    job_type = models.CharField(\n        max_length=20,",
        "detail": "backend.job_post.models",
        "documentation": {}
    },
    {
        "label": "JobPostSerializer",
        "kind": 6,
        "importPath": "backend.job_post.serializers",
        "description": "backend.job_post.serializers",
        "peekOfCode": "class JobPostSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = JobPost\n        fields = [\n            \"id\",\n            \"company\",\n            \"title\",\n            \"tags\",\n            \"job_type\",\n            \"salary_range\",",
        "detail": "backend.job_post.serializers",
        "documentation": {}
    },
    {
        "label": "JobPostCreateView",
        "kind": 6,
        "importPath": "backend.job_post.views",
        "description": "backend.job_post.views",
        "peekOfCode": "class JobPostCreateView(APIView):\n    def post(self, request):\n        if request.user.is_authenticated:\n            try:\n                company = Company.objects.get(email=request.user.email)\n            except Company.DoesNotExist:\n                return Response(\n                    {\n                        \"error\": \"You must be associated with a registered company to post jobs.\"\n                    },",
        "detail": "backend.job_post.views",
        "documentation": {}
    },
    {
        "label": "CompanyJobsView",
        "kind": 6,
        "importPath": "backend.job_post.views",
        "description": "backend.job_post.views",
        "peekOfCode": "class CompanyJobsView(APIView):\n    def get(self, request):\n        if request.user.is_authenticated:\n            try:\n                company = Company.objects.get(email=request.user.email)\n            except Company.DoesNotExist:\n                return Response(\n                    {\"error\": \"Invalid company association.\"},\n                    status=status.HTTP_403_FORBIDDEN,\n                )",
        "detail": "backend.job_post.views",
        "documentation": {}
    },
    {
        "label": "JobPostDeleteView",
        "kind": 6,
        "importPath": "backend.job_post.views",
        "description": "backend.job_post.views",
        "peekOfCode": "class JobPostDeleteView(APIView):\n    def delete(self, request, job_id):\n        if request.user.is_authenticated:\n            try:\n                company = Company.objects.get(email=request.user.email)\n            except Company.DoesNotExist:\n                return Response(\n                    {\"error\": \"Invalid company association.\"},\n                    status=status.HTTP_403_FORBIDDEN,\n                )",
        "detail": "backend.job_post.views",
        "documentation": {}
    },
    {
        "label": "LoginConfig",
        "kind": 6,
        "importPath": "backend.login.apps",
        "description": "backend.login.apps",
        "peekOfCode": "class LoginConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'login'",
        "detail": "backend.login.apps",
        "documentation": {}
    },
    {
        "label": "CandidateLoginView",
        "kind": 6,
        "importPath": "backend.login.views",
        "description": "backend.login.views",
        "peekOfCode": "class CandidateLoginView(APIView):\n    def post(self, request, *args, **kwargs):\n        email = request.data.get(\"email\")\n        password = request.data.get(\"password\")\n        if not email or not password:\n            return Response(\n                {\"message\": \"Email and password are required.\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n        try:",
        "detail": "backend.login.views",
        "documentation": {}
    },
    {
        "label": "CandidateProfileView",
        "kind": 6,
        "importPath": "backend.login.views",
        "description": "backend.login.views",
        "peekOfCode": "class CandidateProfileView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request, *args, **kwargs):\n        try:\n            candidate = Candidate.objects.get(user=request.user)\n        except Candidate.DoesNotExist:\n            return Response(\n                {\"error\": \"Candidate not found\"},\n                status=status.HTTP_404_NOT_FOUND,\n            )",
        "detail": "backend.login.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.registration.migrations.0001_initial",
        "description": "backend.registration.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Candidate',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('full_name', models.CharField(max_length=255)),",
        "detail": "backend.registration.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.registration.migrations.0002_alter_candidate_phone_number",
        "description": "backend.registration.migrations.0002_alter_candidate_phone_number",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('registration', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='candidate',\n            name='phone_number',\n            field=models.CharField(max_length=11, validators=[django.core.validators.MinLengthValidator(11)]),\n        ),",
        "detail": "backend.registration.migrations.0002_alter_candidate_phone_number",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.registration.migrations.0003_alter_candidate_profile_picture_and_more",
        "description": "backend.registration.migrations.0003_alter_candidate_profile_picture_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('registration', '0002_alter_candidate_phone_number'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='candidate',\n            name='profile_picture',\n            field=models.ImageField(blank=True, null=True, upload_to='media/profile_pictures/'),\n        ),",
        "detail": "backend.registration.migrations.0003_alter_candidate_profile_picture_and_more",
        "documentation": {}
    },
    {
        "label": "RegistrationConfig",
        "kind": 6,
        "importPath": "backend.registration.apps",
        "description": "backend.registration.apps",
        "peekOfCode": "class RegistrationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'registration'",
        "detail": "backend.registration.apps",
        "documentation": {}
    },
    {
        "label": "Candidate",
        "kind": 6,
        "importPath": "backend.registration.models",
        "description": "backend.registration.models",
        "peekOfCode": "class Candidate(models.Model):\n    full_name = models.CharField(max_length=255)\n    email = models.EmailField(unique=True)\n    phone_number = models.CharField(\n        max_length=11,\n        validators=[\n            MinLengthValidator(11),\n            # unique_email_validator,\n        ],\n    )",
        "detail": "backend.registration.models",
        "documentation": {}
    },
    {
        "label": "CandidateSerializer",
        "kind": 6,
        "importPath": "backend.registration.serializer",
        "description": "backend.registration.serializer",
        "peekOfCode": "class CandidateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Candidate\n        fields = ['full_name', 'email', 'phone_number', 'location', 'skills', 'resume', 'profile_picture', 'password']\n        extra_kwargs = {\n            'password': {'write_only': True} \n        }\n    def validate_email(self, value):\n        if Candidate.objects.filter(email=value).exists():\n            raise serializers.ValidationError(\"This email is already in use.\")",
        "detail": "backend.registration.serializer",
        "documentation": {}
    },
    {
        "label": "CandidateView",
        "kind": 6,
        "importPath": "backend.registration.views",
        "description": "backend.registration.views",
        "peekOfCode": "class CandidateView(APIView):\n    serializer_class = CandidateSerializer\n    def get(self, request):\n        candidates = Candidate.objects.all()\n        serializer = self.serializer_class(candidates, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        serializer = self.serializer_class(data=request.data)\n        if serializer.is_valid():\n            serializer.save()",
        "detail": "backend.registration.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.manage",
        "description": "backend.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "backend.manage",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    }
]