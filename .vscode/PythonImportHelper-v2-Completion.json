[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "adminLogin",
        "importPath": "admin_app.models",
        "description": "admin_app.models",
        "isExtraImport": true,
        "detail": "admin_app.models",
        "documentation": {}
    },
    {
        "label": "AdminLeaderShipModel",
        "importPath": "admin_app.models",
        "description": "admin_app.models",
        "isExtraImport": true,
        "detail": "admin_app.models",
        "documentation": {}
    },
    {
        "label": "AdminFaqModel",
        "importPath": "admin_app.models",
        "description": "admin_app.models",
        "isExtraImport": true,
        "detail": "admin_app.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinLengthValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinLengthValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "rest_framework",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "rest_framework",
        "description": "rest_framework",
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "admin_login",
        "importPath": "admin_app.views",
        "description": "admin_app.views",
        "isExtraImport": true,
        "detail": "admin_app.views",
        "documentation": {}
    },
    {
        "label": "AdminLeaderShipView",
        "importPath": "admin_app.views",
        "description": "admin_app.views",
        "isExtraImport": true,
        "detail": "admin_app.views",
        "documentation": {}
    },
    {
        "label": "FaqView",
        "importPath": "admin_app.views",
        "description": "admin_app.views",
        "isExtraImport": true,
        "detail": "admin_app.views",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "company_registration.models",
        "description": "company_registration.models",
        "isExtraImport": true,
        "detail": "company_registration.models",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "company_registration.models",
        "description": "company_registration.models",
        "isExtraImport": true,
        "detail": "company_registration.models",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "company_registration.models",
        "description": "company_registration.models",
        "isExtraImport": true,
        "detail": "company_registration.models",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "company_registration.models",
        "description": "company_registration.models",
        "isExtraImport": true,
        "detail": "company_registration.models",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "company_registration.models",
        "description": "company_registration.models",
        "isExtraImport": true,
        "detail": "company_registration.models",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "company_registration.models",
        "description": "company_registration.models",
        "isExtraImport": true,
        "detail": "company_registration.models",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "company_registration.models",
        "description": "company_registration.models",
        "isExtraImport": true,
        "detail": "company_registration.models",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "company_registration.models",
        "description": "company_registration.models",
        "isExtraImport": true,
        "detail": "company_registration.models",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "company_registration.models",
        "description": "company_registration.models",
        "isExtraImport": true,
        "detail": "company_registration.models",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "company_registration.models",
        "description": "company_registration.models",
        "isExtraImport": true,
        "detail": "company_registration.models",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "company_registration.models",
        "description": "company_registration.models",
        "isExtraImport": true,
        "detail": "company_registration.models",
        "documentation": {}
    },
    {
        "label": "CompanySerializer",
        "importPath": "company_registration.serializers",
        "description": "company_registration.serializers",
        "isExtraImport": true,
        "detail": "company_registration.serializers",
        "documentation": {}
    },
    {
        "label": "CompanySerializer",
        "importPath": "company_registration.serializers",
        "description": "company_registration.serializers",
        "isExtraImport": true,
        "detail": "company_registration.serializers",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "Candidate",
        "importPath": "registration.models",
        "description": "registration.models",
        "isExtraImport": true,
        "detail": "registration.models",
        "documentation": {}
    },
    {
        "label": "Candidate",
        "importPath": "registration.models",
        "description": "registration.models",
        "isExtraImport": true,
        "detail": "registration.models",
        "documentation": {}
    },
    {
        "label": "Candidate",
        "importPath": "registration.models",
        "description": "registration.models",
        "isExtraImport": true,
        "detail": "registration.models",
        "documentation": {}
    },
    {
        "label": "Candidate",
        "importPath": "registration.models",
        "description": "registration.models",
        "isExtraImport": true,
        "detail": "registration.models",
        "documentation": {}
    },
    {
        "label": "Candidate",
        "importPath": "registration.models",
        "description": "registration.models",
        "isExtraImport": true,
        "detail": "registration.models",
        "documentation": {}
    },
    {
        "label": "Candidate",
        "importPath": "registration.models",
        "description": "registration.models",
        "isExtraImport": true,
        "detail": "registration.models",
        "documentation": {}
    },
    {
        "label": "Candidate",
        "importPath": "registration.models",
        "description": "registration.models",
        "isExtraImport": true,
        "detail": "registration.models",
        "documentation": {}
    },
    {
        "label": "UpdateApplicationResponse",
        "importPath": "apply.views",
        "description": "apply.views",
        "isExtraImport": true,
        "detail": "apply.views",
        "documentation": {}
    },
    {
        "label": "candidate_details",
        "importPath": "apply.views",
        "description": "apply.views",
        "isExtraImport": true,
        "detail": "apply.views",
        "documentation": {}
    },
    {
        "label": "applied_jobs_view",
        "importPath": "apply.views",
        "description": "apply.views",
        "isExtraImport": true,
        "detail": "apply.views",
        "documentation": {}
    },
    {
        "label": "get_candidate_applied_jobs",
        "importPath": "apply.views",
        "description": "apply.views",
        "isExtraImport": true,
        "detail": "apply.views",
        "documentation": {}
    },
    {
        "label": "ApplyToJobView",
        "importPath": "apply.views",
        "description": "apply.views",
        "isExtraImport": true,
        "detail": "apply.views",
        "documentation": {}
    },
    {
        "label": "CompanyApplicationsAPIView",
        "importPath": "apply.views",
        "description": "apply.views",
        "isExtraImport": true,
        "detail": "apply.views",
        "documentation": {}
    },
    {
        "label": "candidate_details",
        "importPath": "apply.views",
        "description": "apply.views",
        "isExtraImport": true,
        "detail": "apply.views",
        "documentation": {}
    },
    {
        "label": "ApplicationDeleteView",
        "importPath": "apply.views",
        "description": "apply.views",
        "isExtraImport": true,
        "detail": "apply.views",
        "documentation": {}
    },
    {
        "label": "Apply",
        "importPath": "apply.models",
        "description": "apply.models",
        "isExtraImport": true,
        "detail": "apply.models",
        "documentation": {}
    },
    {
        "label": "Apply",
        "importPath": "apply.models",
        "description": "apply.models",
        "isExtraImport": true,
        "detail": "apply.models",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "JobPost",
        "importPath": "job_post.models",
        "description": "job_post.models",
        "isExtraImport": true,
        "detail": "job_post.models",
        "documentation": {}
    },
    {
        "label": "JobPost",
        "importPath": "job_post.models",
        "description": "job_post.models",
        "isExtraImport": true,
        "detail": "job_post.models",
        "documentation": {}
    },
    {
        "label": "JobPost",
        "importPath": "job_post.models",
        "description": "job_post.models",
        "isExtraImport": true,
        "detail": "job_post.models",
        "documentation": {}
    },
    {
        "label": "JobPost",
        "importPath": "job_post.models",
        "description": "job_post.models",
        "isExtraImport": true,
        "detail": "job_post.models",
        "documentation": {}
    },
    {
        "label": "JobPost",
        "importPath": "job_post.models",
        "description": "job_post.models",
        "isExtraImport": true,
        "detail": "job_post.models",
        "documentation": {}
    },
    {
        "label": "JobPost",
        "importPath": "job_post.models",
        "description": "job_post.models",
        "isExtraImport": true,
        "detail": "job_post.models",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "CandidateView",
        "importPath": "registration.views",
        "description": "registration.views",
        "isExtraImport": true,
        "detail": "registration.views",
        "documentation": {}
    },
    {
        "label": "CandidateLoginView",
        "importPath": "login.views",
        "description": "login.views",
        "isExtraImport": true,
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "CandidateUpdateView",
        "importPath": "login.views",
        "description": "login.views",
        "isExtraImport": true,
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "CandidateChangePasswordView",
        "importPath": "login.views",
        "description": "login.views",
        "isExtraImport": true,
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "CompanyChangePasswordView",
        "importPath": "login.views",
        "description": "login.views",
        "isExtraImport": true,
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "CompanyRegisterView",
        "importPath": "company_registration.views",
        "description": "company_registration.views",
        "isExtraImport": true,
        "detail": "company_registration.views",
        "documentation": {}
    },
    {
        "label": "CompanyLoginView",
        "importPath": "company_registration.views",
        "description": "company_registration.views",
        "isExtraImport": true,
        "detail": "company_registration.views",
        "documentation": {}
    },
    {
        "label": "CompanyProfileUpdateView",
        "importPath": "company_registration.views",
        "description": "company_registration.views",
        "isExtraImport": true,
        "detail": "company_registration.views",
        "documentation": {}
    },
    {
        "label": "JobPostCreateView",
        "importPath": "job_post.views",
        "description": "job_post.views",
        "isExtraImport": true,
        "detail": "job_post.views",
        "documentation": {}
    },
    {
        "label": "CompanyJobsView",
        "importPath": "job_post.views",
        "description": "job_post.views",
        "isExtraImport": true,
        "detail": "job_post.views",
        "documentation": {}
    },
    {
        "label": "JobPostDeleteView",
        "importPath": "job_post.views",
        "description": "job_post.views",
        "isExtraImport": true,
        "detail": "job_post.views",
        "documentation": {}
    },
    {
        "label": "JobPostListView",
        "importPath": "job_post.views",
        "description": "job_post.views",
        "isExtraImport": true,
        "detail": "job_post.views",
        "documentation": {}
    },
    {
        "label": "job_detail",
        "importPath": "job_post.views",
        "description": "job_post.views",
        "isExtraImport": true,
        "detail": "job_post.views",
        "documentation": {}
    },
    {
        "label": "GetActiveRecruitmentStatusView",
        "importPath": "job_post.views",
        "description": "job_post.views",
        "isExtraImport": true,
        "detail": "job_post.views",
        "documentation": {}
    },
    {
        "label": "UpdateActiveRecruitmentStatusView",
        "importPath": "job_post.views",
        "description": "job_post.views",
        "isExtraImport": true,
        "detail": "job_post.views",
        "documentation": {}
    },
    {
        "label": "GetJobDetailView",
        "importPath": "job_post.views",
        "description": "job_post.views",
        "isExtraImport": true,
        "detail": "job_post.views",
        "documentation": {}
    },
    {
        "label": "BasicEmailView",
        "importPath": "mail.views",
        "description": "mail.views",
        "isExtraImport": true,
        "detail": "mail.views",
        "documentation": {}
    },
    {
        "label": "BasicEmailViewCompany",
        "importPath": "mail.views",
        "description": "mail.views",
        "isExtraImport": true,
        "detail": "mail.views",
        "documentation": {}
    },
    {
        "label": "SendEmailView",
        "importPath": "mail.views",
        "description": "mail.views",
        "isExtraImport": true,
        "detail": "mail.views",
        "documentation": {}
    },
    {
        "label": "ApplicationMailView",
        "importPath": "mail.views",
        "description": "mail.views",
        "isExtraImport": true,
        "detail": "mail.views",
        "documentation": {}
    },
    {
        "label": "find_jobs",
        "importPath": "chatbot.views",
        "description": "chatbot.views",
        "isExtraImport": true,
        "detail": "chatbot.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "google.generativeai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.generativeai",
        "description": "google.generativeai",
        "detail": "google.generativeai",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "check_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "check_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "CandidateSerializer",
        "importPath": "registration.serializer",
        "description": "registration.serializer",
        "isExtraImport": true,
        "detail": "registration.serializer",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "MultiPartParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "FormParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "MultiPartParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "FormParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "BadHeaderError",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "GetTotalCountsWeb",
        "importPath": "numerics.views",
        "description": "numerics.views",
        "isExtraImport": true,
        "detail": "numerics.views",
        "documentation": {}
    },
    {
        "label": "GetTotalCountCompDash",
        "importPath": "numerics.views",
        "description": "numerics.views",
        "isExtraImport": true,
        "detail": "numerics.views",
        "documentation": {}
    },
    {
        "label": "Application_Mail",
        "importPath": "mail.models",
        "description": "mail.models",
        "isExtraImport": true,
        "detail": "mail.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "generate_cv",
        "importPath": "resume_builder.views",
        "description": "resume_builder.views",
        "isExtraImport": true,
        "detail": "resume_builder.views",
        "documentation": {}
    },
    {
        "label": "generate_cv2",
        "importPath": "resume_builder.views",
        "description": "resume_builder.views",
        "isExtraImport": true,
        "detail": "resume_builder.views",
        "documentation": {}
    },
    {
        "label": "generate_cv3",
        "importPath": "resume_builder.views",
        "description": "resume_builder.views",
        "isExtraImport": true,
        "detail": "resume_builder.views",
        "documentation": {}
    },
    {
        "label": "GetResumes",
        "importPath": "resume_builder.views",
        "description": "resume_builder.views",
        "isExtraImport": true,
        "detail": "resume_builder.views",
        "documentation": {}
    },
    {
        "label": "view_cv",
        "importPath": "resume_builder.views",
        "description": "resume_builder.views",
        "isExtraImport": true,
        "detail": "resume_builder.views",
        "documentation": {}
    },
    {
        "label": "get_resume_data",
        "importPath": "resume_builder.views",
        "description": "resume_builder.views",
        "isExtraImport": true,
        "detail": "resume_builder.views",
        "documentation": {}
    },
    {
        "label": "delete_resume",
        "importPath": "resume_builder.views",
        "description": "resume_builder.views",
        "isExtraImport": true,
        "detail": "resume_builder.views",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "letter",
        "importPath": "reportlab.lib.pagesizes",
        "description": "reportlab.lib.pagesizes",
        "isExtraImport": true,
        "detail": "reportlab.lib.pagesizes",
        "documentation": {}
    },
    {
        "label": "canvas",
        "importPath": "reportlab.pdfgen",
        "description": "reportlab.pdfgen",
        "isExtraImport": true,
        "detail": "reportlab.pdfgen",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "reportlab.lib",
        "description": "reportlab.lib",
        "isExtraImport": true,
        "detail": "reportlab.lib",
        "documentation": {}
    },
    {
        "label": "inch",
        "importPath": "reportlab.lib.units",
        "description": "reportlab.lib.units",
        "isExtraImport": true,
        "detail": "reportlab.lib.units",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "fitz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fitz",
        "description": "fitz",
        "detail": "fitz",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.admin_app.migrations.0001_initial",
        "description": "backend.admin_app.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='adminLogin',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('admin_email', models.CharField(default='ccadminme@gmail.com', max_length=100)),",
        "detail": "backend.admin_app.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.admin_app.migrations.0002_adminleadershipmodel",
        "description": "backend.admin_app.migrations.0002_adminleadershipmodel",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('admin_app', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AdminLeaderShipModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('image', models.ImageField(blank=True, null=True, upload_to='leadership_profile_picture/')),",
        "detail": "backend.admin_app.migrations.0002_adminleadershipmodel",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.admin_app.migrations.0003_adminfaqmodel",
        "description": "backend.admin_app.migrations.0003_adminfaqmodel",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('admin_app', '0002_adminleadershipmodel'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AdminFaqModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),",
        "detail": "backend.admin_app.migrations.0003_adminfaqmodel",
        "documentation": {}
    },
    {
        "label": "AdminAppConfig",
        "kind": 6,
        "importPath": "backend.admin_app.apps",
        "description": "backend.admin_app.apps",
        "peekOfCode": "class AdminAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'admin_app'",
        "detail": "backend.admin_app.apps",
        "documentation": {}
    },
    {
        "label": "adminLogin",
        "kind": 6,
        "importPath": "backend.admin_app.models",
        "description": "backend.admin_app.models",
        "peekOfCode": "class adminLogin(models.Model):\n    admin_email = models.CharField(max_length=100, default=\"ccadminme@gmail.com\")\n    admin_password = models.CharField(max_length=100, default=\"12345678\")\n    def __str__(self):\n        return self.admin_email\nclass AdminLeaderShipModel(models.Model):\n    image = models.ImageField(\n        upload_to=\"leadership_profile_picture/\", null=True, blank=True\n    )\n    name = models.CharField(max_length=100)",
        "detail": "backend.admin_app.models",
        "documentation": {}
    },
    {
        "label": "AdminLeaderShipModel",
        "kind": 6,
        "importPath": "backend.admin_app.models",
        "description": "backend.admin_app.models",
        "peekOfCode": "class AdminLeaderShipModel(models.Model):\n    image = models.ImageField(\n        upload_to=\"leadership_profile_picture/\", null=True, blank=True\n    )\n    name = models.CharField(max_length=100)\n    position = models.CharField(max_length=50, null=True, blank=True)\n    description = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):",
        "detail": "backend.admin_app.models",
        "documentation": {}
    },
    {
        "label": "AdminFaqModel",
        "kind": 6,
        "importPath": "backend.admin_app.models",
        "description": "backend.admin_app.models",
        "peekOfCode": "class AdminFaqModel(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.title\n    class Meta:\n        verbose_name_plural = \"FAQs\"",
        "detail": "backend.admin_app.models",
        "documentation": {}
    },
    {
        "label": "LeadershipSerializer",
        "kind": 6,
        "importPath": "backend.admin_app.serializers",
        "description": "backend.admin_app.serializers",
        "peekOfCode": "class LeadershipSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = AdminLeaderShipModel\n        fields = [\n            \"id\",\n            \"image\",\n            \"name\",\n            \"position\",\n            \"description\",\n            \"created_at\",",
        "detail": "backend.admin_app.serializers",
        "documentation": {}
    },
    {
        "label": "FaqSerializer",
        "kind": 6,
        "importPath": "backend.admin_app.serializers",
        "description": "backend.admin_app.serializers",
        "peekOfCode": "class FaqSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = AdminFaqModel\n        fields = [\"id\", \"title\", \"description\", \"created_at\", \"updated_at\"]",
        "detail": "backend.admin_app.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.admin_app.urls",
        "description": "backend.admin_app.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"web/admin/login/\", admin_login, name=\"admin_login\"),\n     path(\n        \"admin/leadership/section/\",\n        AdminLeaderShipView.as_view(),\n        name=\"AdminLeaderShip_details\",\n    ),\n    path(\n        \"admin/leadership/section/<int:pk>/\",\n        AdminLeaderShipView.as_view(),",
        "detail": "backend.admin_app.urls",
        "documentation": {}
    },
    {
        "label": "AdminLeaderShipView",
        "kind": 6,
        "importPath": "backend.admin_app.views",
        "description": "backend.admin_app.views",
        "peekOfCode": "class AdminLeaderShipView(APIView):\n    def get(self, request):\n        leaders = AdminLeaderShipModel.objects.all()\n        serializer = LeadershipSerializer(leaders, many=True)\n        return Response(serializer.data)\n    def put(self, request, pk=None):\n        try:\n            leaders = AdminLeaderShipModel.objects.get(pk=pk)\n            serializer = LeadershipSerializer(leaders, data=request.data)\n            if serializer.is_valid():",
        "detail": "backend.admin_app.views",
        "documentation": {}
    },
    {
        "label": "FaqView",
        "kind": 6,
        "importPath": "backend.admin_app.views",
        "description": "backend.admin_app.views",
        "peekOfCode": "class FaqView(APIView):\n    def get(self, request):\n        faqs = AdminFaqModel.objects.all()\n        serializer = FaqSerializer(faqs, many=True)\n        return Response(serializer.data)\n    def put(self, request, pk=None):\n        try:\n            faq = AdminFaqModel.objects.get(pk=pk)\n            serializer = FaqSerializer(faq, data=request.data)\n            if serializer.is_valid():",
        "detail": "backend.admin_app.views",
        "documentation": {}
    },
    {
        "label": "admin_login",
        "kind": 2,
        "importPath": "backend.admin_app.views",
        "description": "backend.admin_app.views",
        "peekOfCode": "def admin_login(request):\n    if request.method == \"POST\":\n        data = json.loads(request.body)\n        email = data.get(\"email\")\n        password = data.get(\"password\")\n        try:\n            admin = adminLogin.objects.get(admin_email=email, admin_password=password)\n            return JsonResponse(\n                {\n                    \"status\": \"success\",",
        "detail": "backend.admin_app.views",
        "documentation": {}
    },
    {
        "label": "AllCompanyConfig",
        "kind": 6,
        "importPath": "backend.all_company.apps",
        "description": "backend.all_company.apps",
        "peekOfCode": "class AllCompanyConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'all_company'",
        "detail": "backend.all_company.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.all_company.urls",
        "description": "backend.all_company.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"list/\", CompanyListView.as_view(), name=\"company-list\"),\n    path(\n        \"<int:company_id>/details/\",\n        CompanyDetailView.as_view(),\n        name=\"company_detail\",\n    ),\n    path(\n        \"admin/delete/company/<int:company_id>/\",\n        AdminDeleteCompany.as_view(),",
        "detail": "backend.all_company.urls",
        "documentation": {}
    },
    {
        "label": "CompanyListView",
        "kind": 6,
        "importPath": "backend.all_company.views",
        "description": "backend.all_company.views",
        "peekOfCode": "class CompanyListView(APIView):\n    def get(self, request):\n        companies = Company.objects.all()\n        serializer = CompanySerializer(companies, many=True)\n        return Response(\n            serializer.data,\n            status=status.HTTP_200_OK,\n        )\nclass CompanyDetailView(APIView):\n    def get(self, request, company_id):",
        "detail": "backend.all_company.views",
        "documentation": {}
    },
    {
        "label": "CompanyDetailView",
        "kind": 6,
        "importPath": "backend.all_company.views",
        "description": "backend.all_company.views",
        "peekOfCode": "class CompanyDetailView(APIView):\n    def get(self, request, company_id):\n        try:\n            company = Company.objects.get(id=company_id)\n            serializer = CompanySerializer(company)\n            return Response(serializer.data, status=status.HTTP_200_OK)\n        except Company.DoesNotExist:\n            return Response(\n                {\"error\": \"Company not found.\"},\n                status=status.HTTP_404_NOT_FOUND,",
        "detail": "backend.all_company.views",
        "documentation": {}
    },
    {
        "label": "AdminDeleteCompany",
        "kind": 6,
        "importPath": "backend.all_company.views",
        "description": "backend.all_company.views",
        "peekOfCode": "class AdminDeleteCompany(APIView):\n    def delete(self, request, company_id):\n        try:\n            company = Company.objects.get(id=company_id)\n            company.delete()\n            return Response(\n                {\"message\": \"Company deleted successfully\"},\n                status=status.HTTP_204_NO_CONTENT,\n            )\n        except Company.DoesNotExist:",
        "detail": "backend.all_company.views",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "kind": 6,
        "importPath": "backend.app.apps",
        "description": "backend.app.apps",
        "peekOfCode": "class AppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'app'",
        "detail": "backend.app.apps",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.apply.migrations.0001_initial",
        "description": "backend.apply.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('company_registration', '0006_company_latitude_company_longitude'),\n        ('registration', '0003_alter_candidate_profile_picture_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Apply',\n            fields=[",
        "detail": "backend.apply.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.apply.migrations.0002_apply_application_response",
        "description": "backend.apply.migrations.0002_apply_application_response",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('apply', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='apply',\n            name='application_response',\n            field=models.CharField(choices=[('Application Submitted', 'Application Submitted'), ('Under Review', 'Under Review'), ('Interview Scheduled', 'Interview Scheduled'), ('Shortlisted', 'Shortlisted'), ('Rejected', 'Rejected')], default='Application Submitted', max_length=50),\n        ),",
        "detail": "backend.apply.migrations.0002_apply_application_response",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.apply.migrations.0003_alter_apply_application_response",
        "description": "backend.apply.migrations.0003_alter_apply_application_response",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('apply', '0002_apply_application_response'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='apply',\n            name='application_response',\n            field=models.CharField(choices=[('Application Submitted', 'Application Submitted'), ('Under Review', 'Under Review'), ('Interview Scheduled', 'Interview Scheduled'), ('Shortlisted', 'Shortlisted'), ('Rejected', 'Rejected')], max_length=50),\n        ),",
        "detail": "backend.apply.migrations.0003_alter_apply_application_response",
        "documentation": {}
    },
    {
        "label": "ApplyConfig",
        "kind": 6,
        "importPath": "backend.apply.apps",
        "description": "backend.apply.apps",
        "peekOfCode": "class ApplyConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apply'",
        "detail": "backend.apply.apps",
        "documentation": {}
    },
    {
        "label": "Apply",
        "kind": 6,
        "importPath": "backend.apply.models",
        "description": "backend.apply.models",
        "peekOfCode": "class Apply(models.Model):\n    candidate = models.ForeignKey(\n        Candidate,\n        on_delete=models.CASCADE,\n        related_name=\"apply\",\n    )\n    company = models.ForeignKey(\n        Company,\n        on_delete=models.CASCADE,\n        related_name=\"apply\",",
        "detail": "backend.apply.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.apply.urls",
        "description": "backend.apply.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"candidate/details/<int:candidate_id>/\",\n        candidate_details,\n        name=\"candidate-details\",\n    ),\n    # URL for the page that displays applied jobs\n    path(\"candidate/applied-jobs/\", applied_jobs_view, name=\"applied_jobs_view\"),\n    # API endpoint to fetch applied jobs data\n    path(",
        "detail": "backend.apply.urls",
        "documentation": {}
    },
    {
        "label": "ApplyToJobView",
        "kind": 6,
        "importPath": "backend.apply.views",
        "description": "backend.apply.views",
        "peekOfCode": "class ApplyToJobView(APIView):\n    def post(self, request, *args, **kwargs):\n        candidate_id = request.data.get(\"candidate_id\")\n        company_id = request.data.get(\"company_id\")\n        job_id = request.data.get(\"job_id\")\n        job_title = request.data.get(\"job_title\")\n        # Directly create the application without any checks\n        Apply.objects.create(\n            candidate_id=candidate_id,\n            company_id=company_id,",
        "detail": "backend.apply.views",
        "documentation": {}
    },
    {
        "label": "ApplicationPagination",
        "kind": 6,
        "importPath": "backend.apply.views",
        "description": "backend.apply.views",
        "peekOfCode": "class ApplicationPagination(PageNumberPagination):\n    page_size = 5  # Number of applications per page\n    page_size_query_param = \"page_size\"\n    max_page_size = 50\nclass CompanyApplicationsAPIView(APIView):\n    pagination_class = ApplicationPagination\n    def get(self, request, company_id, *args, **kwargs):\n        applications = Apply.objects.filter(company_id=company_id).values(\n            \"id\",\n            \"candidate__full_name\",",
        "detail": "backend.apply.views",
        "documentation": {}
    },
    {
        "label": "CompanyApplicationsAPIView",
        "kind": 6,
        "importPath": "backend.apply.views",
        "description": "backend.apply.views",
        "peekOfCode": "class CompanyApplicationsAPIView(APIView):\n    pagination_class = ApplicationPagination\n    def get(self, request, company_id, *args, **kwargs):\n        applications = Apply.objects.filter(company_id=company_id).values(\n            \"id\",\n            \"candidate__full_name\",\n            \"job_id\",\n            \"job_title\",\n            \"time\",\n            \"candidate_id\",",
        "detail": "backend.apply.views",
        "documentation": {}
    },
    {
        "label": "ApplicationDeleteView",
        "kind": 6,
        "importPath": "backend.apply.views",
        "description": "backend.apply.views",
        "peekOfCode": "class ApplicationDeleteView(APIView):\n    def delete(self, request, application_id):\n        try:\n            application = Apply.objects.get(id=application_id)\n            application.delete()\n            return Response(\n                {\"message\": \"Application deleted successfully.\"},\n                status=status.HTTP_204_NO_CONTENT,\n            )\n        except Apply.DoesNotExist:",
        "detail": "backend.apply.views",
        "documentation": {}
    },
    {
        "label": "UpdateApplicationResponse",
        "kind": 6,
        "importPath": "backend.apply.views",
        "description": "backend.apply.views",
        "peekOfCode": "class UpdateApplicationResponse(APIView):\n    def post(self, request):\n        application_id = request.data.get(\"application_id\")\n        new_response = request.data.get(\"response\")\n        if not application_id or not new_response:\n            return Response(\n                {\"error\": \"Application ID and response are required.\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n        try:",
        "detail": "backend.apply.views",
        "documentation": {}
    },
    {
        "label": "candidate_details",
        "kind": 2,
        "importPath": "backend.apply.views",
        "description": "backend.apply.views",
        "peekOfCode": "def candidate_details(request, candidate_id):\n    candidate = get_object_or_404(Candidate, id=candidate_id)\n    data = {\n        \"full_name\": candidate.full_name,\n        \"email\": candidate.email,\n        \"phone_number\": candidate.phone_number,\n        \"location\": candidate.location,\n        \"skills\": candidate.skills.split(\",\") if candidate.skills else [],\n        \"resume\": candidate.resume.url if candidate.resume else None,\n        \"profile_picture\": (",
        "detail": "backend.apply.views",
        "documentation": {}
    },
    {
        "label": "get_candidate_applied_jobs",
        "kind": 2,
        "importPath": "backend.apply.views",
        "description": "backend.apply.views",
        "peekOfCode": "def get_candidate_applied_jobs(request, candidate_id):\n    \"\"\"\n    SQL JOIN query.\n    combines data from Apply, JobPost, and Company models.\n    \"\"\"\n    with connection.cursor() as cursor:\n        cursor.execute(\n            \"\"\"\n            SELECT \n                a.id AS apply_id,",
        "detail": "backend.apply.views",
        "documentation": {}
    },
    {
        "label": "applied_jobs_view",
        "kind": 2,
        "importPath": "backend.apply.views",
        "description": "backend.apply.views",
        "peekOfCode": "def applied_jobs_view(request):\n    return render(request, \"applied_jobs.html\")\nclass UpdateApplicationResponse(APIView):\n    def post(self, request):\n        application_id = request.data.get(\"application_id\")\n        new_response = request.data.get(\"response\")\n        if not application_id or not new_response:\n            return Response(\n                {\"error\": \"Application ID and response are required.\"},\n                status=status.HTTP_400_BAD_REQUEST,",
        "detail": "backend.apply.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.backend.asgi",
        "description": "backend.backend.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "backend.backend.asgi",
        "documentation": {}
    },
    {
        "label": "GOOGLE_MAPS_API_KEY",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "GOOGLE_MAPS_API_KEY = os.getenv(\"GOOGLE_MAPS_API_KEY\")\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-!xp!c1femi58d#r(h(!x@km19er)^^yxmj=9dav^gfg^nevf@(\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-!xp!c1femi58d#r(h(!x@km19er)^^yxmj=9dav^gfg^nevf@(\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-!xp!c1femi58d#r(h(!x@km19er)^^yxmj=9dav^gfg^nevf@(\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"app\",",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"app\",\n    \"registration\",\n    \"rest_framework\",",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"corsheaders.middleware.CorsMiddleware\",\n]",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    \"DEFAULT_PERMISSION_CLASSES\": [\n        \"rest_framework.permissions.AllowAny\",\n    ],\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"rest_framework.authentication.SessionAuthentication\",\n        \"rest_framework.authentication.TokenAuthentication\",\n    ],\n}\nCORS_ALLOW_METHODS = [",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_METHODS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "CORS_ALLOW_METHODS = [\n    \"DELETE\",\n    \"GET\",\n    \"OPTIONS\",\n    \"PATCH\",\n    \"POST\",\n    \"PUT\",\n]\nCORS_ALLOW_HEADERS = [\n    \"accept\",",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_HEADERS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "CORS_ALLOW_HEADERS = [\n    \"accept\",\n    \"accept-encoding\",\n    \"authorization\",\n    \"content-type\",\n    \"dnt\",\n    \"origin\",\n    \"user-agent\",\n    \"x-csrftoken\",\n    \"x-requested-with\",",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "ROOT_URLCONF = \"backend.urls\"\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\"\n]\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\"\n]\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "WSGI_APPLICATION = \"backend.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n# Database configuration\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": \"career_connect\",\n        \"USER\": \"postgres\",\n        \"PASSWORD\": \"114114114\",",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": \"career_connect\",\n        \"USER\": \"postgres\",\n        \"PASSWORD\": \"114114114\",\n        \"HOST\": \"localhost\",\n        \"PORT\": \"5432\",\n    }\n}",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# ==================================================================code for media files======================================================",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# ==================================================================code for media files======================================================\n# ============================================================================================================================================",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# ==================================================================code for media files======================================================\n# ============================================================================================================================================\n# Media settings",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# ==================================================================code for media files======================================================\n# ============================================================================================================================================\n# Media settings\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# ==================================================================code for media files======================================================\n# ============================================================================================================================================\n# Media settings\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\n# SMTP server details\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587  # Use 587 for TLS, 465 for SSL",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "MEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\n# SMTP server details\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587  # Use 587 for TLS, 465 for SSL\nEMAIL_USE_TLS = True  # Use True for TLS; set to False for SSL\nEMAIL_USE_SSL = False\nEMAIL_HOST_USER = os.getenv(\"EMAIL_HOST_USER\")\nEMAIL_HOST_PASSWORD = os.getenv(\"EMAIL_HOST_PASSWORD\")",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\n# SMTP server details\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587  # Use 587 for TLS, 465 for SSL\nEMAIL_USE_TLS = True  # Use True for TLS; set to False for SSL\nEMAIL_USE_SSL = False\nEMAIL_HOST_USER = os.getenv(\"EMAIL_HOST_USER\")\nEMAIL_HOST_PASSWORD = os.getenv(\"EMAIL_HOST_PASSWORD\")",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\n# SMTP server details\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587  # Use 587 for TLS, 465 for SSL\nEMAIL_USE_TLS = True  # Use True for TLS; set to False for SSL\nEMAIL_USE_SSL = False\nEMAIL_HOST_USER = os.getenv(\"EMAIL_HOST_USER\")\nEMAIL_HOST_PASSWORD = os.getenv(\"EMAIL_HOST_PASSWORD\")",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587  # Use 587 for TLS, 465 for SSL\nEMAIL_USE_TLS = True  # Use True for TLS; set to False for SSL\nEMAIL_USE_SSL = False\nEMAIL_HOST_USER = os.getenv(\"EMAIL_HOST_USER\")\nEMAIL_HOST_PASSWORD = os.getenv(\"EMAIL_HOST_PASSWORD\")",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_PORT = 587  # Use 587 for TLS, 465 for SSL\nEMAIL_USE_TLS = True  # Use True for TLS; set to False for SSL\nEMAIL_USE_SSL = False\nEMAIL_HOST_USER = os.getenv(\"EMAIL_HOST_USER\")\nEMAIL_HOST_PASSWORD = os.getenv(\"EMAIL_HOST_PASSWORD\")",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_USE_TLS = True  # Use True for TLS; set to False for SSL\nEMAIL_USE_SSL = False\nEMAIL_HOST_USER = os.getenv(\"EMAIL_HOST_USER\")\nEMAIL_HOST_PASSWORD = os.getenv(\"EMAIL_HOST_PASSWORD\")",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_SSL",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_USE_SSL = False\nEMAIL_HOST_USER = os.getenv(\"EMAIL_HOST_USER\")\nEMAIL_HOST_PASSWORD = os.getenv(\"EMAIL_HOST_PASSWORD\")",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_HOST_USER = os.getenv(\"EMAIL_HOST_USER\")\nEMAIL_HOST_PASSWORD = os.getenv(\"EMAIL_HOST_PASSWORD\")",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = os.getenv(\"EMAIL_HOST_PASSWORD\")",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.backend.urls",
        "description": "backend.backend.urls",
        "peekOfCode": "urlpatterns = [\n    path('api/find-jobs/', find_jobs, name='find-jobs'),\n    path(\"apply/\", ApplyToJobView.as_view(), name=\"apply_to_job\"),\n    path(\n        \"applications/<int:company_id>/\",\n        CompanyApplicationsAPIView.as_view(),\n        name=\"company-applications\",\n    ),\n    path(\"candidates/<int:candidate_id>/\", candidate_details, name=\"candidate_details\"),\n    path(",
        "detail": "backend.backend.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.backend.wsgi",
        "description": "backend.backend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.backend.wsgi",
        "documentation": {}
    },
    {
        "label": "ChatbotConfig",
        "kind": 6,
        "importPath": "backend.chatbot.apps",
        "description": "backend.chatbot.apps",
        "peekOfCode": "class ChatbotConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'chatbot'",
        "detail": "backend.chatbot.apps",
        "documentation": {}
    },
    {
        "label": "find_jobs",
        "kind": 2,
        "importPath": "backend.chatbot.views",
        "description": "backend.chatbot.views",
        "peekOfCode": "def find_jobs(request):\n    try:\n        print(\"✅ Received raw data:\", request.data)\n        if not isinstance(request.data, dict):  \n            return Response({\"error\": \"Invalid data format. Expected a JSON object.\"}, status=400)\n        data = request.data\n        skills = data.get('skills', '')\n        degree = data.get('degree', '')\n        experience = data.get('experience', '')\n        job_type = data.get('jobType', '')",
        "detail": "backend.chatbot.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.company_registration.migrations.0001_initial",
        "description": "backend.company_registration.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Company',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),",
        "detail": "backend.company_registration.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.company_registration.migrations.0002_company_password",
        "description": "backend.company_registration.migrations.0002_company_password",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('company_registration', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='company',\n            name='password',\n            field=models.CharField(default='123456', max_length=255),\n            preserve_default=False,",
        "detail": "backend.company_registration.migrations.0002_company_password",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.company_registration.migrations.0003_company_type",
        "description": "backend.company_registration.migrations.0003_company_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('company_registration', '0002_company_password'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='company',\n            name='type',\n            field=models.CharField(default='company', editable=False, max_length=50),\n        ),",
        "detail": "backend.company_registration.migrations.0003_company_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.company_registration.migrations.0004_rename_type_company_user_type",
        "description": "backend.company_registration.migrations.0004_rename_type_company_user_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('company_registration', '0003_company_type'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='company',\n            old_name='type',\n            new_name='user_type',\n        ),",
        "detail": "backend.company_registration.migrations.0004_rename_type_company_user_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.company_registration.migrations.0005_alter_company_user_type",
        "description": "backend.company_registration.migrations.0005_alter_company_user_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('company_registration', '0004_rename_type_company_user_type'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='company',\n            name='user_type',\n            field=models.CharField(default='company', editable=False),\n        ),",
        "detail": "backend.company_registration.migrations.0005_alter_company_user_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.company_registration.migrations.0006_company_latitude_company_longitude",
        "description": "backend.company_registration.migrations.0006_company_latitude_company_longitude",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('company_registration', '0005_alter_company_user_type'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='company',\n            name='latitude',\n            field=models.FloatField(blank=True, null=True),\n        ),",
        "detail": "backend.company_registration.migrations.0006_company_latitude_company_longitude",
        "documentation": {}
    },
    {
        "label": "CompanyRegistrationConfig",
        "kind": 6,
        "importPath": "backend.company_registration.apps",
        "description": "backend.company_registration.apps",
        "peekOfCode": "class CompanyRegistrationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'company_registration'",
        "detail": "backend.company_registration.apps",
        "documentation": {}
    },
    {
        "label": "Company",
        "kind": 6,
        "importPath": "backend.company_registration.models",
        "description": "backend.company_registration.models",
        "peekOfCode": "class Company(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField(unique=True)\n    latitude = models.FloatField(null=True, blank=True)\n    longitude = models.FloatField(null=True, blank=True)\n    phone_number = models.CharField(\n        max_length=11,\n        validators=[\n            MinLengthValidator(11),\n        ],",
        "detail": "backend.company_registration.models",
        "documentation": {}
    },
    {
        "label": "CompanySerializer",
        "kind": 6,
        "importPath": "backend.company_registration.serializers",
        "description": "backend.company_registration.serializers",
        "peekOfCode": "class CompanySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Company\n        fields = \"__all__\"\n    def create(self, validated_data):\n        password = validated_data.get(\"password\")\n        if password:\n            validated_data[\"password\"] = make_password(password)\n        return super().create(validated_data)\n    def update(self, instance, validated_data):",
        "detail": "backend.company_registration.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.company_registration.urls",
        "description": "backend.company_registration.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"get/company/details/<int:company_id>/\",\n        GetCompanyDetailView.as_view(),\n        name=\"get_company_detail\",\n    ),\n]",
        "detail": "backend.company_registration.urls",
        "documentation": {}
    },
    {
        "label": "CompanyRegisterView",
        "kind": 6,
        "importPath": "backend.company_registration.views",
        "description": "backend.company_registration.views",
        "peekOfCode": "class CompanyRegisterView(APIView):\n    def post(self, request):\n        serializer = CompanySerializer(data=request.data)\n        if serializer.is_valid():\n            company = serializer.save()\n            return Response(\n                {\n                    \"message\": \"Company registered successfully!\",\n                    \"company\": serializer.data,\n                },",
        "detail": "backend.company_registration.views",
        "documentation": {}
    },
    {
        "label": "CompanyLoginView",
        "kind": 6,
        "importPath": "backend.company_registration.views",
        "description": "backend.company_registration.views",
        "peekOfCode": "class CompanyLoginView(APIView):\n    def post(self, request, *args, **kwargs):\n        email = request.data.get(\"email\")\n        password = request.data.get(\"password\")\n        if not email or not password:\n            return Response(\n                {\"message\": \"Email and password are required.\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n        try:",
        "detail": "backend.company_registration.views",
        "documentation": {}
    },
    {
        "label": "CompanyProfileUpdateView",
        "kind": 6,
        "importPath": "backend.company_registration.views",
        "description": "backend.company_registration.views",
        "peekOfCode": "class CompanyProfileUpdateView(APIView):\n    def post(self, request):\n        email = request.data.get(\"email\")\n        if not email:\n            return Response(\n                {\"error\": \"Email is required to update profile.\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n        try:\n            company = Company.objects.get(email=email)",
        "detail": "backend.company_registration.views",
        "documentation": {}
    },
    {
        "label": "GetCompanyActiveRecruit",
        "kind": 6,
        "importPath": "backend.company_registration.views",
        "description": "backend.company_registration.views",
        "peekOfCode": "class GetCompanyActiveRecruit(APIView):\n    def get(self, request):\n        company = Company.objects.get(email=request.data.get(\"email\"))\n        recruit = company.recruit_set.filter(status=\"active\")\nclass GetCompanyDetailView(APIView):\n    def get(self, request, company_id):\n        try:\n            company = Company.objects.get(id=company_id)\n            serializer = CompanySerializer(company)\n            return Response(serializer.data, status=status.HTTP_200_OK)",
        "detail": "backend.company_registration.views",
        "documentation": {}
    },
    {
        "label": "GetCompanyDetailView",
        "kind": 6,
        "importPath": "backend.company_registration.views",
        "description": "backend.company_registration.views",
        "peekOfCode": "class GetCompanyDetailView(APIView):\n    def get(self, request, company_id):\n        try:\n            company = Company.objects.get(id=company_id)\n            serializer = CompanySerializer(company)\n            return Response(serializer.data, status=status.HTTP_200_OK)\n        except Company.DoesNotExist:\n            return Response(\n                {\"error\": \"Company not found.\"},\n                status=status.HTTP_404_NOT_FOUND,",
        "detail": "backend.company_registration.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.job_post.migrations.0001_initial",
        "description": "backend.job_post.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('company_registration', '0005_alter_company_user_type'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='JobPost',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "backend.job_post.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.job_post.migrations.0002_jobpost_job_location",
        "description": "backend.job_post.migrations.0002_jobpost_job_location",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('job_post', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='jobpost',\n            name='job_location',\n            field=models.CharField(blank=True, max_length=255, null=True),\n        ),",
        "detail": "backend.job_post.migrations.0002_jobpost_job_location",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.job_post.migrations.0003_alter_jobpost_tags",
        "description": "backend.job_post.migrations.0003_alter_jobpost_tags",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('job_post', '0002_jobpost_job_location'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='jobpost',\n            name='tags',\n            field=models.TextField(help_text='Comma-separated tags'),\n        ),",
        "detail": "backend.job_post.migrations.0003_alter_jobpost_tags",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.job_post.migrations.0004_alter_jobpost_tags",
        "description": "backend.job_post.migrations.0004_alter_jobpost_tags",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('job_post', '0003_alter_jobpost_tags'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='jobpost',\n            name='tags',\n            field=models.CharField(help_text='Comma-separated tags (max 6)', max_length=255),\n        ),",
        "detail": "backend.job_post.migrations.0004_alter_jobpost_tags",
        "documentation": {}
    },
    {
        "label": "JobPostConfig",
        "kind": 6,
        "importPath": "backend.job_post.apps",
        "description": "backend.job_post.apps",
        "peekOfCode": "class JobPostConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'job_post'",
        "detail": "backend.job_post.apps",
        "documentation": {}
    },
    {
        "label": "JobPost",
        "kind": 6,
        "importPath": "backend.job_post.models",
        "description": "backend.job_post.models",
        "peekOfCode": "class JobPost(models.Model):\n    company = models.ForeignKey(\n        Company,\n        on_delete=models.CASCADE,\n        related_name=\"job_posts\",\n    )\n    title = models.CharField(max_length=255)\n    job_location = models.CharField(max_length=255, null=True, blank=True)\n    tags = models.CharField(\n        max_length=255,",
        "detail": "backend.job_post.models",
        "documentation": {}
    },
    {
        "label": "JobPostSerializer",
        "kind": 6,
        "importPath": "backend.job_post.serializers",
        "description": "backend.job_post.serializers",
        "peekOfCode": "class JobPostSerializer(serializers.ModelSerializer):\n    company_name = serializers.CharField(source='company.name', read_only=True)\n    class Meta:\n        model = JobPost\n        fields = [\n            \"id\",\n            \"company\",\n            \"company_name\",  # <-- Add this\n            \"title\",\n            \"job_location\",",
        "detail": "backend.job_post.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.job_post.urls",
        "description": "backend.job_post.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"get-active-recruitment-status/\",\n        GetActiveRecruitmentStatusView.as_view(),\n        name=\"get-active-status\",\n    ),\n    path(\n        \"update-active-recruitment-status/\",\n        UpdateActiveRecruitmentStatusView.as_view(),\n        name=\"update-active-status\",",
        "detail": "backend.job_post.urls",
        "documentation": {}
    },
    {
        "label": "JobPostCreateView",
        "kind": 6,
        "importPath": "backend.job_post.views",
        "description": "backend.job_post.views",
        "peekOfCode": "class JobPostCreateView(APIView):\n    def post(self, request):\n        if request.user.is_authenticated:\n            try:\n                company = Company.objects.get(email=request.user.email)\n            except Company.DoesNotExist:\n                return Response(\n                    {\n                        \"error\": \"You must be associated with a registered company to post jobs.\"\n                    },",
        "detail": "backend.job_post.views",
        "documentation": {}
    },
    {
        "label": "CompanyJobsView",
        "kind": 6,
        "importPath": "backend.job_post.views",
        "description": "backend.job_post.views",
        "peekOfCode": "class CompanyJobsView(APIView):\n    def get(self, request):\n        if request.user.is_authenticated:\n            try:\n                company = Company.objects.get(email=request.user.email)\n            except Company.DoesNotExist:\n                return Response(\n                    {\"error\": \"Invalid company association.\"},\n                    status=status.HTTP_403_FORBIDDEN,\n                )",
        "detail": "backend.job_post.views",
        "documentation": {}
    },
    {
        "label": "JobPostDeleteView",
        "kind": 6,
        "importPath": "backend.job_post.views",
        "description": "backend.job_post.views",
        "peekOfCode": "class JobPostDeleteView(APIView):\n    def delete(self, request, job_id):\n        if request.user.is_authenticated:\n            try:\n                company = Company.objects.get(email=request.user.email)\n            except Company.DoesNotExist:\n                return Response(\n                    {\"error\": \"Invalid company association.\"},\n                    status=status.HTTP_403_FORBIDDEN,\n                )",
        "detail": "backend.job_post.views",
        "documentation": {}
    },
    {
        "label": "JobPostPagination",
        "kind": 6,
        "importPath": "backend.job_post.views",
        "description": "backend.job_post.views",
        "peekOfCode": "class JobPostPagination(PageNumberPagination):\n    page_size = 6  # Number of posts per page\n    page_size_query_param = \"page_size\"\n    max_page_size = 10\nclass JobPostListView(ListAPIView):\n    serializer_class = JobPostSerializer\n    pagination_class = JobPostPagination\n    queryset = JobPost.objects.all().order_by(\"-posted_at\")\nclass GetActiveRecruitmentStatusView(APIView):\n    def get(self, request):",
        "detail": "backend.job_post.views",
        "documentation": {}
    },
    {
        "label": "JobPostListView",
        "kind": 6,
        "importPath": "backend.job_post.views",
        "description": "backend.job_post.views",
        "peekOfCode": "class JobPostListView(ListAPIView):\n    serializer_class = JobPostSerializer\n    pagination_class = JobPostPagination\n    queryset = JobPost.objects.all().order_by(\"-posted_at\")\nclass GetActiveRecruitmentStatusView(APIView):\n    def get(self, request):\n        company_id = request.query_params.get(\"company_id\")\n        if not company_id:\n            return Response(\n                {\"error\": \"Company ID is required.\"},",
        "detail": "backend.job_post.views",
        "documentation": {}
    },
    {
        "label": "GetActiveRecruitmentStatusView",
        "kind": 6,
        "importPath": "backend.job_post.views",
        "description": "backend.job_post.views",
        "peekOfCode": "class GetActiveRecruitmentStatusView(APIView):\n    def get(self, request):\n        company_id = request.query_params.get(\"company_id\")\n        if not company_id:\n            return Response(\n                {\"error\": \"Company ID is required.\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n        try:\n            company = Company.objects.get(id=company_id)",
        "detail": "backend.job_post.views",
        "documentation": {}
    },
    {
        "label": "UpdateActiveRecruitmentStatusView",
        "kind": 6,
        "importPath": "backend.job_post.views",
        "description": "backend.job_post.views",
        "peekOfCode": "class UpdateActiveRecruitmentStatusView(APIView):\n    def post(self, request):\n        company_id = request.data.get(\"company_id\")\n        recruits = request.data.get(\"recruits\")\n        if not company_id or not recruits:\n            return Response(\n                {\"error\": \"Company ID and recruits data are required.\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n        try:",
        "detail": "backend.job_post.views",
        "documentation": {}
    },
    {
        "label": "GetJobDetailView",
        "kind": 6,
        "importPath": "backend.job_post.views",
        "description": "backend.job_post.views",
        "peekOfCode": "class GetJobDetailView(APIView):\n    def get(self, request, job_id):\n        try:\n            jobpost = JobPost.objects.get(id=job_id)\n            serializer = JobPostSerializer(jobpost)\n            return Response(serializer.data, status=status.HTTP_200_OK)\n        except JobPost.DoesNotExist:\n            return Response(\n                {\"error\": \"Job post not found.\"},\n                status=status.HTTP_404_NOT_FOUND,",
        "detail": "backend.job_post.views",
        "documentation": {}
    },
    {
        "label": "job_detail",
        "kind": 2,
        "importPath": "backend.job_post.views",
        "description": "backend.job_post.views",
        "peekOfCode": "def job_detail(request, id):\n    try:\n        job = JobPost.objects.select_related(\"company\").get(id=id)\n        data = {\n            \"id\": job.id,\n            \"title\": job.title,\n            \"company\": job.company.name,\n            \"job_location\": job.job_location,\n            \"tags\": job.tags,\n            \"job_type\": job.job_type,",
        "detail": "backend.job_post.views",
        "documentation": {}
    },
    {
        "label": "LoginConfig",
        "kind": 6,
        "importPath": "backend.login.apps",
        "description": "backend.login.apps",
        "peekOfCode": "class LoginConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'login'",
        "detail": "backend.login.apps",
        "documentation": {}
    },
    {
        "label": "CandidateLoginView",
        "kind": 6,
        "importPath": "backend.login.views",
        "description": "backend.login.views",
        "peekOfCode": "class CandidateLoginView(APIView):\n    def post(self, request, *args, **kwargs):\n        email = request.data.get(\"email\")\n        password = request.data.get(\"password\")\n        if not email or not password:\n            return Response(\n                {\"message\": \"Email and password are required.\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n        try:",
        "detail": "backend.login.views",
        "documentation": {}
    },
    {
        "label": "CandidateProfileView",
        "kind": 6,
        "importPath": "backend.login.views",
        "description": "backend.login.views",
        "peekOfCode": "class CandidateProfileView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request, *args, **kwargs):\n        try:\n            candidate = Candidate.objects.get(user=request.user)\n        except Candidate.DoesNotExist:\n            return Response(\n                {\"error\": \"Candidate not found\"},\n                status=status.HTTP_404_NOT_FOUND,\n            )",
        "detail": "backend.login.views",
        "documentation": {}
    },
    {
        "label": "CandidateUpdateView",
        "kind": 6,
        "importPath": "backend.login.views",
        "description": "backend.login.views",
        "peekOfCode": "class CandidateUpdateView(APIView):\n    parser_classes = [MultiPartParser, FormParser]\n    def put(self, request, pk):\n        try:\n            candidate = Candidate.objects.get(id=pk)\n            # Update text fields only if they are provided and not empty\n            if request.data.get('full_name'):\n                candidate.full_name = request.data.get('full_name')\n            if request.data.get('phone_number'):\n                candidate.phone_number = request.data.get('phone_number')",
        "detail": "backend.login.views",
        "documentation": {}
    },
    {
        "label": "CandidateChangePasswordView",
        "kind": 6,
        "importPath": "backend.login.views",
        "description": "backend.login.views",
        "peekOfCode": "class CandidateChangePasswordView(APIView):\n    def put(self, request, pk):\n        try:\n            candidate = Candidate.objects.get(id=pk)\n            new_password = request.data.get(\"password\")\n            if not new_password:\n                return Response({\"message\": \"New password is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n            # Hash and save the new password\n            candidate.password = make_password(new_password)\n            candidate.save()",
        "detail": "backend.login.views",
        "documentation": {}
    },
    {
        "label": "CompanyChangePasswordView",
        "kind": 6,
        "importPath": "backend.login.views",
        "description": "backend.login.views",
        "peekOfCode": "class CompanyChangePasswordView(APIView):\n    def put(self, request, pk):\n        try:\n            company = Company.objects.get(id=pk)\n            new_password = request.data.get(\"password\")\n            if not new_password:\n                return Response({\"message\": \"New password is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n            # Hash and save the new password\n            company.password = make_password(new_password)\n            company.save()",
        "detail": "backend.login.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.mail.migrations.0001_initial",
        "description": "backend.mail.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('company_registration', '0006_company_latitude_company_longitude'),\n        ('job_post', '0002_jobpost_job_location'),\n        ('registration', '0004_alter_candidate_profile_picture_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Application',",
        "detail": "backend.mail.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.mail.migrations.0002_rename_application_application_mail",
        "description": "backend.mail.migrations.0002_rename_application_application_mail",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('company_registration', '0006_company_latitude_company_longitude'),\n        ('job_post', '0002_jobpost_job_location'),\n        ('mail', '0001_initial'),\n        ('registration', '0004_alter_candidate_profile_picture_and_more'),\n    ]\n    operations = [\n        migrations.RenameModel(\n            old_name='Application',",
        "detail": "backend.mail.migrations.0002_rename_application_application_mail",
        "documentation": {}
    },
    {
        "label": "MailConfig",
        "kind": 6,
        "importPath": "backend.mail.apps",
        "description": "backend.mail.apps",
        "peekOfCode": "class MailConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'mail'",
        "detail": "backend.mail.apps",
        "documentation": {}
    },
    {
        "label": "Application_Mail",
        "kind": 6,
        "importPath": "backend.mail.models",
        "description": "backend.mail.models",
        "peekOfCode": "class Application_Mail(models.Model):\n    job_post = models.ForeignKey(\n        JobPost, on_delete=models.CASCADE, related_name=\"applications\"\n    )\n    candidate = models.ForeignKey(\n        Candidate, on_delete=models.CASCADE, related_name=\"applications\"\n    )\n    company = models.ForeignKey(\n        Company, on_delete=models.CASCADE, related_name=\"applications\"\n    )",
        "detail": "backend.mail.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.mail.urls",
        "description": "backend.mail.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"send-email/\", SendEmailView.as_view(), name=\"send_email\"),\n    path(\"contact-email/\", ApplicationMailView.as_view(), name=\"application_mail\"),\n]",
        "detail": "backend.mail.urls",
        "documentation": {}
    },
    {
        "label": "SendEmailView",
        "kind": 6,
        "importPath": "backend.mail.views",
        "description": "backend.mail.views",
        "peekOfCode": "class SendEmailView(APIView):\n    def post(self, request):\n        candidate_email = request.data.get(\"candidateEmail\")\n        job_post_id = request.data.get(\"jobId\")\n        candidate_id = request.data.get(\"candidateId\")\n        company_id = request.data.get(\"companyId\")\n        message = request.data.get(\"message\")\n        subject = \"Message from Career Connect\"\n        print(\"candidat email is\", candidate_email)\n        print(\"job post id is\", job_post_id)",
        "detail": "backend.mail.views",
        "documentation": {}
    },
    {
        "label": "ApplicationMailView",
        "kind": 6,
        "importPath": "backend.mail.views",
        "description": "backend.mail.views",
        "peekOfCode": "class ApplicationMailView(APIView):\n    def post(self, request, *args, **kwargs):\n        try:\n            data = json.loads(request.body)\n            name = data.get(\"name\")\n            email = data.get(\"email\")\n            subject = data.get(\"subject\")\n            message = data.get(\"message\")\n            if not all([name, email, subject, message]):\n                return Response(",
        "detail": "backend.mail.views",
        "documentation": {}
    },
    {
        "label": "BasicEmailView",
        "kind": 6,
        "importPath": "backend.mail.views",
        "description": "backend.mail.views",
        "peekOfCode": "class BasicEmailView(APIView):\n    def post(self, request):\n        receiver = request.data.get(\"receiver\")\n        if not receiver:\n            return Response({\"error\": \"Recipient email is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n        try:\n            return self._send_candidate_email_with_link(receiver)\n        except Candidate.DoesNotExist:\n            return Response({\"error\": \"Candidate with this email does not exist.\"}, status=status.HTTP_400_BAD_REQUEST)\n        except Exception as e:",
        "detail": "backend.mail.views",
        "documentation": {}
    },
    {
        "label": "BasicEmailViewCompany",
        "kind": 6,
        "importPath": "backend.mail.views",
        "description": "backend.mail.views",
        "peekOfCode": "class BasicEmailViewCompany(APIView):\n    def post(self, request):\n        receiver = request.data.get(\"receiver\")\n        if not receiver:\n            return Response({\"error\": \"Recipient email is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n        try:\n            return self._send_company_email_with_link(receiver)\n        except Company.DoesNotExist:\n            return Response({\"error\": \"Company with this email does not exist.\"}, status=status.HTTP_400_BAD_REQUEST)\n        except Exception as e:",
        "detail": "backend.mail.views",
        "documentation": {}
    },
    {
        "label": "MapConfig",
        "kind": 6,
        "importPath": "backend.map.apps",
        "description": "backend.map.apps",
        "peekOfCode": "class MapConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'map'",
        "detail": "backend.map.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.map.urls",
        "description": "backend.map.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"get-lat-lang/\", GetLatLangMap.as_view(), name=\"get-lat-lang\"),\n    path(\"update-lat-lang/\", UpdateLatLangMap.as_view(), name=\"update_lat_lang\"),\n    path(\n        \"<int:company_id>/\",\n        get_company_location,\n        name=\" company_latlang_id \",\n    ),\n]",
        "detail": "backend.map.urls",
        "documentation": {}
    },
    {
        "label": "GetLatLangMap",
        "kind": 6,
        "importPath": "backend.map.views",
        "description": "backend.map.views",
        "peekOfCode": "class GetLatLangMap(APIView):\n    def get(self, request):\n        company_email = request.query_params.get(\"company_email\")\n        if not company_email:\n            return Response(\n                {\"error\": \"Company email is required.\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n        try:\n            company = Company.objects.get(email=company_email)",
        "detail": "backend.map.views",
        "documentation": {}
    },
    {
        "label": "UpdateLatLangMap",
        "kind": 6,
        "importPath": "backend.map.views",
        "description": "backend.map.views",
        "peekOfCode": "class UpdateLatLangMap(APIView):\n    def put(self, request):\n        company_email = request.data.get(\"company_email\")\n        latitude = request.data.get(\"latitude\")\n        longitude = request.data.get(\"longitude\")\n        if not company_email:\n            return Response(\n                {\"error\": \"Company email is required.\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )",
        "detail": "backend.map.views",
        "documentation": {}
    },
    {
        "label": "get_company_location",
        "kind": 2,
        "importPath": "backend.map.views",
        "description": "backend.map.views",
        "peekOfCode": "def get_company_location(request, company_id):\n    try:\n        company = Company.objects.get(id=company_id)\n        location_data = {\n            \"latitude\": company.latitude,\n            \"longitude\": company.longitude,\n        }\n        return JsonResponse(location_data)\n    except Company.DoesNotExist:\n        return JsonResponse(",
        "detail": "backend.map.views",
        "documentation": {}
    },
    {
        "label": "NumericsConfig",
        "kind": 6,
        "importPath": "backend.numerics.apps",
        "description": "backend.numerics.apps",
        "peekOfCode": "class NumericsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'numerics'",
        "detail": "backend.numerics.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.numerics.urls",
        "description": "backend.numerics.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"sum/total/numbers\", GetTotalCountsWeb.as_view(), name=\"get_totals_view\"),\n    path(\"sum/count/company/dashboard\", GetTotalCountCompDash.as_view(), name=\"get_company_dash_count\"),\n]",
        "detail": "backend.numerics.urls",
        "documentation": {}
    },
    {
        "label": "GetTotalCountsWeb",
        "kind": 6,
        "importPath": "backend.numerics.views",
        "description": "backend.numerics.views",
        "peekOfCode": "class GetTotalCountsWeb(View):\n    def get(self, request, *args, **kwargs):\n        try:\n            total_job_posts = JobPost.objects.count()\n            total_candidates = Candidate.objects.count()\n            total_companies = Company.objects.count()\n            data = {\n                \"total_job_posts\": total_job_posts,\n                \"total_candidates\": total_candidates,\n                \"total_companies\": total_companies,",
        "detail": "backend.numerics.views",
        "documentation": {}
    },
    {
        "label": "GetTotalCountCompDash",
        "kind": 6,
        "importPath": "backend.numerics.views",
        "description": "backend.numerics.views",
        "peekOfCode": "class GetTotalCountCompDash(APIView):\n    def get(self, request, *args, **kwargs):\n        try:\n            company_id = request.GET.get(\"company_id\")\n            if not company_id:\n                return JsonResponse({\"error\": \"Company ID is required\"}, status=400)\n            job_posts_count = JobPost.objects.filter(company_id=company_id).count()\n            applications_count = Application_Mail.objects.filter(\n                company_id=company_id\n            ).count()",
        "detail": "backend.numerics.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.registration.migrations.0001_initial",
        "description": "backend.registration.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Candidate',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('full_name', models.CharField(max_length=255)),",
        "detail": "backend.registration.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.registration.migrations.0002_alter_candidate_phone_number",
        "description": "backend.registration.migrations.0002_alter_candidate_phone_number",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('registration', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='candidate',\n            name='phone_number',\n            field=models.CharField(max_length=11, validators=[django.core.validators.MinLengthValidator(11)]),\n        ),",
        "detail": "backend.registration.migrations.0002_alter_candidate_phone_number",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.registration.migrations.0003_alter_candidate_profile_picture_and_more",
        "description": "backend.registration.migrations.0003_alter_candidate_profile_picture_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('registration', '0002_alter_candidate_phone_number'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='candidate',\n            name='profile_picture',\n            field=models.ImageField(blank=True, null=True, upload_to='media/profile_pictures/'),\n        ),",
        "detail": "backend.registration.migrations.0003_alter_candidate_profile_picture_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.registration.migrations.0004_alter_candidate_profile_picture_and_more",
        "description": "backend.registration.migrations.0004_alter_candidate_profile_picture_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('registration', '0003_alter_candidate_profile_picture_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='candidate',\n            name='profile_picture',\n            field=models.ImageField(blank=True, null=True, upload_to='profile_pictures/'),\n        ),",
        "detail": "backend.registration.migrations.0004_alter_candidate_profile_picture_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.registration.migrations.0005_candidate_dob_candidate_gender_and_more",
        "description": "backend.registration.migrations.0005_candidate_dob_candidate_gender_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('registration', '0004_alter_candidate_profile_picture_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='candidate',\n            name='dob',\n            field=models.DateField(blank=True, null=True, verbose_name='Date of Birth'),\n        ),",
        "detail": "backend.registration.migrations.0005_candidate_dob_candidate_gender_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.registration.migrations.0006_alter_candidate_gender",
        "description": "backend.registration.migrations.0006_alter_candidate_gender",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('registration', '0005_candidate_dob_candidate_gender_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='candidate',\n            name='gender',\n            field=models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True),\n        ),",
        "detail": "backend.registration.migrations.0006_alter_candidate_gender",
        "documentation": {}
    },
    {
        "label": "RegistrationConfig",
        "kind": 6,
        "importPath": "backend.registration.apps",
        "description": "backend.registration.apps",
        "peekOfCode": "class RegistrationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'registration'",
        "detail": "backend.registration.apps",
        "documentation": {}
    },
    {
        "label": "Candidate",
        "kind": 6,
        "importPath": "backend.registration.models",
        "description": "backend.registration.models",
        "peekOfCode": "class Candidate(models.Model):\n    GENDER_CHOICES = [\n        ('M', 'Male'),\n        ('F', 'Female'),\n    ]\n    # Basic Information\n    full_name = models.CharField(max_length=255)\n    email = models.EmailField(unique=True)\n    phone_number = models.CharField(\n        max_length=11,",
        "detail": "backend.registration.models",
        "documentation": {}
    },
    {
        "label": "CandidateSerializer",
        "kind": 6,
        "importPath": "backend.registration.serializer",
        "description": "backend.registration.serializer",
        "peekOfCode": "class CandidateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Candidate\n        fields = [\n            'full_name', 'email', 'phone_number', 'location',\n            'dob', 'gender', 'religion',\n            'high_school_name', 'high_school_degree', 'high_school_passing_year', 'high_school_grade',\n            'university_name', 'university_degree', 'university_passing_year', 'university_grade',\n            'professional_experience', 'skills',\n            'resume', 'profile_picture', 'password'",
        "detail": "backend.registration.serializer",
        "documentation": {}
    },
    {
        "label": "CandidateView",
        "kind": 6,
        "importPath": "backend.registration.views",
        "description": "backend.registration.views",
        "peekOfCode": "class CandidateView(APIView):\n    serializer_class = CandidateSerializer\n    def get(self, request):\n        candidates = Candidate.objects.all()\n        serializer = self.serializer_class(candidates, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        serializer = self.serializer_class(data=request.data)\n        if serializer.is_valid():\n            serializer.save()",
        "detail": "backend.registration.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.resume_builder.migrations.0001_initial",
        "description": "backend.resume_builder.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('registration', '0003_alter_candidate_profile_picture_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CandidateCV',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "backend.resume_builder.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.resume_builder.migrations.0002_candidatecv_address_candidatecv_dob_and_more",
        "description": "backend.resume_builder.migrations.0002_candidatecv_address_candidatecv_dob_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('resume_builder', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='candidatecv',\n            name='address',\n            field=models.TextField(blank=True),\n        ),",
        "detail": "backend.resume_builder.migrations.0002_candidatecv_address_candidatecv_dob_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.resume_builder.migrations.0003_candidatecv_template_number",
        "description": "backend.resume_builder.migrations.0003_candidatecv_template_number",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('resume_builder', '0002_candidatecv_address_candidatecv_dob_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='candidatecv',\n            name='template_number',\n            field=models.CharField(blank=True, max_length=100),\n        ),",
        "detail": "backend.resume_builder.migrations.0003_candidatecv_template_number",
        "documentation": {}
    },
    {
        "label": "CandidateCVAdmin",
        "kind": 6,
        "importPath": "backend.resume_builder.admin",
        "description": "backend.resume_builder.admin",
        "peekOfCode": "class CandidateCVAdmin(admin.ModelAdmin):\n    list_display = ('id', 'name', 'email', 'created_at', 'view_cv', 'view_thumbnail', 'template_number')\n    list_filter = ('created_at', 'gender', 'religion')\n    search_fields = ('name', 'email', 'phone')\n    readonly_fields = ('created_at',)\n    ordering = ('-created_at',)\n    fieldsets = (\n        ('Personal Information', {\n            'fields': (\n                'candidate', 'name', 'title', 'email', 'phone',",
        "detail": "backend.resume_builder.admin",
        "documentation": {}
    },
    {
        "label": "ResumeBuilderConfig",
        "kind": 6,
        "importPath": "backend.resume_builder.apps",
        "description": "backend.resume_builder.apps",
        "peekOfCode": "class ResumeBuilderConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'resume_builder'",
        "detail": "backend.resume_builder.apps",
        "documentation": {}
    },
    {
        "label": "CandidateCV",
        "kind": 6,
        "importPath": "backend.resume_builder.models",
        "description": "backend.resume_builder.models",
        "peekOfCode": "class CandidateCV(models.Model):\n    candidate = models.ForeignKey(\n        Candidate,\n        on_delete=models.CASCADE,\n        related_name=\"candidate_cv\",\n        null=True,\n    )\n    email = models.EmailField()\n    name = models.CharField(max_length=255, blank=True)\n    title = models.CharField(max_length=255, blank=True)",
        "detail": "backend.resume_builder.models",
        "documentation": {}
    },
    {
        "label": "ResumeSerializer",
        "kind": 6,
        "importPath": "backend.resume_builder.serializers",
        "description": "backend.resume_builder.serializers",
        "peekOfCode": "class ResumeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CandidateCV\n        fields = [\n            \"id\", \"cv_file\", \"email\", \"created_at\",\"template_number\",\n            \"name\", \"title\", \"phone\", \"gender\", \"dob\", \"address\", \"religion\",\n            \"skillset\", \"education\", \"experience\", \"thumbnail\"\n        ]",
        "detail": "backend.resume_builder.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.resume_builder.urls",
        "description": "backend.resume_builder.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"generate-cv/\", generate_cv, name=\"generate_cv\"),\n    path(\"generate-cv2/\", generate_cv2, name=\"generate_cv2\"),\n    path(\"generate-cv3/\", generate_cv3, name=\"generate_cv3\"),\n    path(\"candidate/get/resumes/\", GetResumes.as_view(), name=\"get_resumes\"),\n    path(\"cv/<str:file_name>/\", view_cv, name=\"view_cv\"),\n    path(\"delete_resume/<int:resume_id>/\", delete_resume, name=\"delete_resume\"),\n    path(\"get-resume-data/<int:resume_id>/\", get_resume_data, name=\"get_resume_data\"),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "backend.resume_builder.urls",
        "documentation": {}
    },
    {
        "label": "GetResumes",
        "kind": 6,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "class GetResumes(APIView):\n    def get(self, request):\n        candidate_id = request.query_params.get(\"candidate_id\")\n        if not candidate_id:\n            return Response(\n                {\"error\": \"Candidate ID is required.\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n        # Ensure the candidate exists in the database\n        try:",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "get_resume_data",
        "kind": 2,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "def get_resume_data(request, resume_id):\n    \"\"\"Get resume data for editing\"\"\"\n    try:\n        resume = CandidateCV.objects.get(id=resume_id)\n        data = ResumeSerializer(resume).data\n        if resume.template_number:\n            data['template_number'] = int(resume.template_number)\n        else:\n            data['template_number'] = 1\n        return JsonResponse(data)",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "draw_section_header",
        "kind": 2,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "def draw_section_header(canvas, text, y_position):\n    \"\"\"Helper function to draw section headers with consistent styling\"\"\"\n    canvas.setFillColor(colors.HexColor(\"#2C3E50\"))\n    canvas.setFont(\"Helvetica-Bold\", 14)\n    canvas.drawString(inch, y_position, text)\n    canvas.setFillColor(colors.HexColor(\"#34495E\"))\n    canvas.line(inch, y_position - 5, 7.5 * inch, y_position - 5)\n    canvas.setFillColor(colors.black)\n    canvas.setFont(\"Helvetica\", 11)\n    return y_position - 25",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "draw_skill_badge",
        "kind": 2,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "def draw_skill_badge(canvas, skill, x, y, color):\n    \"\"\"Draw a more elegant skill badge with a subtle background and refined style\"\"\"\n    # Calculate text width for badge size\n    canvas.setFont(\"Helvetica\", 11)\n    text_width = canvas.stringWidth(skill)\n    badge_width = text_width + 20\n    badge_height = 25\n    # Draw badge background with subtle gradient-like effect (light gray)\n    canvas.setFillColor(colors.HexColor(\"#ecf0f1\"))  # Light gray background\n    canvas.roundRect(x, y - 15, badge_width, badge_height, 10, fill=1)",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "generate_cv",
        "kind": 2,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "def generate_cv(request):\n    if request.method == \"POST\":\n        data = json.loads(request.body)\n        candidate_id = data.get(\"candidate_id\")\n        candidate_name = data[\"name\"]\n        # Create PDF\n        buffer = BytesIO()\n        pdf = canvas.Canvas(buffer, pagesize=letter)\n        width, height = letter\n        # Set background color for header",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "view_cv",
        "kind": 2,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "def view_cv(request, file_name):\n    file_path = os.path.join(settings.MEDIA_ROOT, \"gen_cv\", file_name)\n    if os.path.exists(file_path):\n        return FileResponse(open(file_path, \"rb\"), content_type=\"application/pdf\")\n    else:\n        raise Http404(\"CV not found\")\n@api_view([\"DELETE\"])\ndef delete_resume(request, resume_id):\n    try:\n        resume = CandidateCV.objects.get(id=resume_id)",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "delete_resume",
        "kind": 2,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "def delete_resume(request, resume_id):\n    try:\n        resume = CandidateCV.objects.get(id=resume_id)\n        resume.delete()  # This will delete the resume record\n        return Response(\n            {\"message\": \"Resume deleted successfully\"}, status=status.HTTP_200_OK\n        )\n    except CandidateCV.DoesNotExist:\n        return Response({\"error\": \"Resume not found\"}, status=status.HTTP_404_NOT_FOUND)\n# ////////////////////////////////////////////cv2 template///////////////////////////////////////////////////////////////////",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "draw_section_header2",
        "kind": 2,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "def draw_section_header2(canvas, text, y_position):\n    \"\"\"Draw modern section headers with new styling\"\"\"\n    # Draw decorative element\n    canvas.setFillColor(colors.HexColor(COLORS[\"accent\"]))\n    canvas.rect(inch - 10, y_position - 8, 5, 25, fill=1)\n    # Draw header text\n    canvas.setFillColor(colors.HexColor(COLORS[\"text\"]))\n    canvas.setFont(\"Helvetica-Bold\", 16)\n    canvas.drawString(inch, y_position, text)\n    # Reset styles",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "draw_skill_badge2",
        "kind": 2,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "def draw_skill_badge2(canvas, skill, x, y):\n    \"\"\"Draw minimalist skill badges with new design\"\"\"\n    canvas.setFont(\"Helvetica\", 10)\n    text_width = canvas.stringWidth(skill)\n    badge_width = text_width + 30\n    badge_height = 30\n    # Draw skill box with orange accent\n    canvas.setFillColor(colors.HexColor(COLORS[\"muted\"]))\n    canvas.rect(x, y - 18, badge_width, badge_height, fill=1)\n    # Draw orange accent line",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "generate_cv2",
        "kind": 2,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "def generate_cv2(request):\n    if request.method == \"POST\":\n        data = json.loads(request.body)\n        candidate_id = data.get(\"candidate_id\")\n        candidate_name = data[\"name\"]\n        # Create PDF\n        buffer = BytesIO()\n        pdf = canvas.Canvas(buffer, pagesize=letter)\n        width, height = letter\n        # Minimal header design with orange accent",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "draw_section_header3",
        "kind": 2,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "def draw_section_header3(canvas, text, y_position, is_sidebar=False):\n    \"\"\"Draw section headers with blue theme styling\"\"\"\n    if is_sidebar:\n        # Sidebar header styling\n        canvas.setFillColor(colors.HexColor(COLORS_3[\"accent\"]))\n        canvas.rect(0.3 * inch, y_position - 5, 2.2 * inch, 2, fill=1)\n        canvas.setFillColor(colors.HexColor(COLORS_3[\"white\"]))\n        canvas.setFont(\"Helvetica-Bold\", 12)\n        canvas.drawString(0.3 * inch, y_position, text)\n    else:",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "draw_skill_badge3",
        "kind": 2,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "def draw_skill_badge3(canvas, skill, x, y):\n    \"\"\"Draw skill badges with blue theme\"\"\"\n    canvas.setFont(\"Helvetica\", 9)\n    text_width = canvas.stringWidth(skill)\n    badge_width = max(text_width + 20, 2 * inch)  # Minimum width for sidebar\n    badge_height = 22\n    # Draw skill background\n    canvas.setFillColor(colors.HexColor(COLORS_3[\"light_blue\"]))\n    canvas.roundRect(x, y - 12, badge_width, badge_height, 8, fill=1)\n    # Draw accent border",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "draw_contact_item3",
        "kind": 2,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "def draw_contact_item3(canvas, icon, text, x, y):\n    \"\"\"Draw contact information with icons in sidebar\"\"\"\n    canvas.setFillColor(colors.HexColor(COLORS_3[\"accent\"]))\n    canvas.setFont(\"Helvetica-Bold\", 10)\n    canvas.drawString(x, y, icon)\n    canvas.setFillColor(colors.HexColor(COLORS_3[\"white\"]))\n    canvas.setFont(\"Helvetica\", 9)\n    canvas.drawString(x + 15, y, text)\n    return y - 20\n@csrf_exempt",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "generate_cv3",
        "kind": 2,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "def generate_cv3(request):\n    if request.method == \"POST\":\n        data = json.loads(request.body)\n        candidate_id = data.get(\"candidate_id\")\n        candidate_name = data[\"name\"]\n        # Create PDF\n        buffer = BytesIO()\n        pdf = canvas.Canvas(buffer, pagesize=letter)\n        width, height = letter\n        # Draw sidebar background",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "SKILL_COLORS",
        "kind": 5,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "SKILL_COLORS = [\n    \"#ecf0f1\", \n]\ndef draw_section_header(canvas, text, y_position):\n    \"\"\"Helper function to draw section headers with consistent styling\"\"\"\n    canvas.setFillColor(colors.HexColor(\"#2C3E50\"))\n    canvas.setFont(\"Helvetica-Bold\", 14)\n    canvas.drawString(inch, y_position, text)\n    canvas.setFillColor(colors.HexColor(\"#34495E\"))\n    canvas.line(inch, y_position - 5, 7.5 * inch, y_position - 5)",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "COLORS",
        "kind": 5,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "COLORS = {\n    \"primary\": \"#FF7043\",  # Light Orange\n    \"secondary\": \"#FF5722\",  # Darker Orange\n    \"accent\": \"#FFB74D\",  # Soft Orange\n    \"text\": \"#212121\",  # Almost Black\n    \"light_text\": \"#424242\",  # Dark Gray\n    \"muted\": \"#FBE9E7\",  # Very Light Orange\n    \"white\": \"#ffffff\",\n    \"dark_black\": \"#010203\",\n}",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "COLORS_3",
        "kind": 5,
        "importPath": "backend.resume_builder.views",
        "description": "backend.resume_builder.views",
        "peekOfCode": "COLORS_3 = {\n    \"primary\": \"#2E86AB\",      # Deep Blue\n    \"secondary\": \"#A23B72\",    # Burgundy Pink\n    \"accent\": \"#F18F01\",       # Orange Accent\n    \"light_blue\": \"#A8DADC\",   # Light Blue\n    \"teal\": \"#457B9D\",         # Teal\n    \"text\": \"#1D3557\",         # Dark Blue Text\n    \"light_text\": \"#457B9D\",   # Medium Blue\n    \"background\": \"#F1FAEE\",   # Very Light Blue\n    \"white\": \"#FFFFFF\",",
        "detail": "backend.resume_builder.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.manage",
        "description": "backend.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "backend.manage",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    }
]